GraphQL
----------
A query language for communication betwen client and server
It allows more flexible approach than REST

Suppose, you have a Book Store
In your DB, you have two tables

Books - title, genre, reviews, authorId
Author - name, age, bio, booksId

If for an instance, 
I need to find the author of a book based on Book Id provided by user.
After that, I need to fetch all books written by that author.

In normal REST Architecture, I will need to do multiple queries
1. Get AuthorId from BookId
2. Get each book's details iteratively written by that author 
(The author might have written N books, 
So I need to make N queries to fetch details of all books)

But in GraphQL, we can do all above tasks in a single query

{
    book(id:123)
    {
        title
        genre
        reviews
        author {
            name
            bio
            books {
                name
            }
        }
    }
}
Here, I fetched names of all books written by the Author,
Who was fetched from Book ID provided.
--------------------------------------------------------------------------

Do the initial Express Setup
install express, nodemon

To work with GraphQL in node.js
We need to install packages
    npm install express express-graphql graphql --save

graphql package in JS implementation of GraphQL
express-graphql helps express app interact with GraphQL

On running app with this added code
We see an error on visiting : http://localhost:4000/graphql

    "message": "GraphQL middleware options must contain a schema."

Hence, we need to define structure of our data before beginning to query via GraphQL.
--------------------------------------------------------------------------

So we will define the Schema for GraphQL queries
First for Book 

1. Defined Structure for Book Type
2. Wrapped BookType in RootQueey and made it accessible via id
3. Exported RootType from schema.JS
4. Imported schema in app.js
5. Added schema used in middleware
--------------------------------------------------------------------------
Create dummy data

In resolve()
    Here we write code for fetching book from the ID
    We can use Vanilla JS code
    But there is a utility called lodash, 
    which does the job without writing excess code

    npm install lodash
--------------------------------------------------------------------------

Now we have our schema nad dummy data ready.
How to test these via GraphQL?
By setting->  graphiql: true in middleware 
and visit the endpoint again.

There we see a documentation explorer, which shows the structure of our schema

Tested query :
{
  book(id:"1"){
    name
    genre
  }
}
-----------------
Data Returned:
{
  "data": {
    "book": {
      "name": "IronMan",
      "genre": "Sci-Fi"
    }
  }
}
--------------------------------------------------------------------------
Changing data type of Id prop from string to GraphQLID
Even though, our dummy data has string Ids
This will still work because,
When we get args.id from UI, it is taken as string in Javascript
--------------------------------------------------------------------------
Right now, we wrote:
Query for fetching Author details based on Book Id

We included authorID field in our dummy data to show the mapping
We wrote a resolve() inside author property in Book Type
To query author details based on authorId present in current book

Now, we established a property Books in authorType.
This books is a GraphQLlist of BookType
In resolve() we write logic to retrieve all books written by this author
{
  author(id:2){
    name
    age
    books{
      name
      genre
    }
  }
}

Now, we wrote the code to query all books and authors from DB
--------------------------------------------------------------------------

Lets connect to MongoDB
------------------------
  npm install mongoose - To deal with MongoDB
  nom install dotenv  - to store credentials in a file

  Write DB connection string in config.env file and 
  add this file to gitignore as it contains important credentials

  Create a file which does DB Connection and once done 
  Start listening at PORT
  Put the Port No in config.env file as well.
--------------------------------------------------------------------------

Create Models for Book And author
Which will act as Collections in MongoDBAtlas

Define schema for Book and Author and export them.
Delete dummy data amd comment out resolve logic for all.

Import models in schema.js 
--------------------------------------------------------------------------

Mutations in GraphQL
----------------------
They allow us to mutate/change our data (add,delete,update)
via GraphQL

In Mutation, we define the functions through which user can edit/add/delete MongoDB data.
We write the logic of mutation in resolve()

Test the mutation on GraphiQL:
Input:
mutation {
  addAuthor(name:"Alex P", age: 58) {
    name
    age
  }
}
-----------------
Output:
{
  "data": {
    "addAuthor": {
      "name": "Alex P",
      "age": 58
    }
  }
}
Now check on MongoDB Atlas, you will find new entry in Authors Collection.

Similarly we add a mutation to Add a book.
Input:
mutation {
  addBook(name: "Shaun the Sheep", genre: "Comic", authorId: "65d71f1022130f2ae0ee7ec8") {
    name
    genre
    authorId
  }
}
---------------
Output:
{
  "data": {
    "addBook": {
      "name": "Shaun the Sheep",
      "genre": "Comic",
    }
  }
}






